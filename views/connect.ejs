<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>breadboard</title>
    <link href="/css/fontawesome.min.css" rel="stylesheet">
    <link href="/css/solid.min.css" rel="stylesheet">
    <link href="/css/regular.min.css" rel="stylesheet">
    <link href="/css/brands.min.css" rel="stylesheet">
    <link href="./global.css" rel="stylesheet" />
    <% if (agent === "electron") { %>
    <link href="./electron.css" rel="stylesheet" />
    <% } %>
    <style>
    body.default #reindex2 {
    /*
      background: royalblue;
      color: white;
      */
      border: 1px solid royalblue;
      color: royalblue;
      background: none;
    }
    body.dark #reindex2 {
      border: 1px solid cornflowerblue;
      color: cornflowerblue;
      background: none;
    }
    body.default #select {
      border: 1px solid royalblue;
      background: royalblue;
      color: white;
    }
    body.dark #select {
      border: 1px solid cornflowerblue;
      background: cornflowerblue;
      color: white;
    }
    body.default button.add {
      border: 1px solid royalblue;
      background: royalblue;
      color: white;
    }
    body.dark button.add {
      border: 1px solid cornflowerblue;
      background: cornflowerblue;
      color: white;
    }
    </style>
  </head>
  <body class="<%=theme%>" data-style="<%=style%>">
    <div id='bar'></div>
    <nav class="<%=platform%>">
      <a title="home" class='btn' href="/" class='btn'><i class="fa-solid fa-house"></i></a>
      <button title='back' id='prev'><i class="fa-solid fa-chevron-left"></i></button>
      <button title='forward' id='next'><i class="fa-solid fa-chevron-right"></i></button>
      <a title="bookmarked filters" class='btn' href="/favorites"><i class="fa-solid fa-star"></i></a>
      <a title="liked items" class='btn' href="/?query=tag:favorite"><i class="fa-solid fa-heart"></i></a>
      <div class='status'></div>
      <input type='search' placeholder='search' class='search flexible'>
      <a title='discord' class='btn' target="_blank" href="https://discord.gg/6MJ6MQScnX"><i class="fa-brands fa-discord"></i></a>
      <a title='twitter' class='btn' target="_blank" href="https://twitter.com/cocktailpeanut"><i class="fa-brands fa-twitter"></i></a>
      <a title='help' class='btn' href="/help"><i class="fa-solid fa-clipboard-question"></i></a>
      <a title='settings' class='btn' href="/settings"><i class="fa-solid fa-gear"></i></a>
      <button id='notification' class= 'hidden'><i class="fa-solid fa-bell"></i></button>
    </nav>
    <div class='settings'></div>
    <script src="./modules/api.js"></script>
    <script src="./dexie.js"></script>
    <script>
    let db;
    let user;
    let backup;
    const VERSION = "<%=version%>"
    const api = new API()
    const init_db = async () => {
      // init data db
      db = new Dexie("data")
      db.version(2).stores({
        files: "file_path, agent, model_name, model_hash, root_path, prompt, btime, mtime, width, height, *tokens",
      })
      // init user db
      user = new Dexie("user")
      user.version(1).stores({
        folders: "&name",
        checkpoints: "&root_path, btime",
        settings: "key, val",
        favorites: "query, global"
      })
    }
    const init_theme = async () => {
      let theme = await user.settings.where({ key: "theme" }).first()
      if (!theme) theme = { val: "default" }
      document.body.className = theme.val
      document.querySelector("html").className = theme.val
      api.theme(theme.val)
    }
    const search = (query) => {
      if (query && query.length > 0) {
        location.href = "/?query=" + query
      } else {
        location.href = "/"
      }
    }

    const recommended_template = (r) => {
      return `<div class='row'>
      <div>${r}</div>
      <div class='flexible'></div>
      <button class='add' data-name='${r}'><i class="fa-solid fa-folder-plus"></i> Connect</button> 
</div>`
    }
    const template = (r) => {
      return `<div class='row'>
      <div>${r}</div>
      <div class='flexible'></div>
      <!--<button class='reindex-folder' data-name='${r}'><i class="fa-solid fa-rotate"></i> Re-index</button> -->
      <button class='del' data-name='${r}'><i class="fa-solid fa-xmark"></i> Disconnect</button> 
</div>`
    }

    const renderSettings = async () => {


      let res = await user.folders.toArray()
      res = res.map((r) => {
        return r.name
      })
      let rows
      if (res.length > 0) {
        rows = res.map(template).join("")
      } else {
        <% if (agent === "web") { %>
          rows = `<div class='center-faded'>Connect folders from the recommended list below.</div>`
        <% } else { %>
          rows = "<div class='center-faded'>Click 'connect a folder' to connect a folder to breadboard.<br><br>Or select from the recommended folders below.</div>"
        <% } %>
      }
      let defaults = await api.defaults()
      let recommended = defaults.filter((item) => {
        return !res.includes(item)
      })
      let currentZoom = await user.settings.where({ key: "zoom" }).first()
      let zoom;
      if (currentZoom) {
        zoom = currentZoom.val
      } else {
        zoom = Math.round(100 / window.devicePixelRatio)
      }
      let recommendedHtml = ""
//      if (recommended.length > 0) {
        recommendedHtml = `<br><br>
        <div class='header'>
          <h2>Recommended</h2>
          <div>&nbsp;&nbsp;</div>
          <button class='customize'><i class="fa-regular fa-pen-to-square"></i> edit</button>
        </div>
        <div class='explain hidden'>To edit the recommended list,
          <ol>
            <li>Open <code><%=config%></code></li>
            <li>Update the <code>folders</code> list attribute</li>
            <li>Restart the app</li>
          </ol>
          <div>Here's what the YAML file may look like:</div>
  <pre>folders:
    - /root/invokeai/outputs
    - /root/stable-diffusion-webui/outputs</pre></div>
        <div class='rows'>
        ${recommended.map(recommended_template).join("")}
        </div>`
//      }

      document.querySelector(".settings").innerHTML = `<main>
      <div class='header'>
        <a class='link' href="/settings"><i class="fa-solid fa-angles-left"></i> settings</a></a>
      </div>
      <br><br>
      <div class='header'>
        <h2>Connected Folders</h2>
        <div class='flexible'></div>
        <% if (agent !== "web") { %>
          <button id='select'><i class="fa-solid fa-folder-plus"></i> Connect a folder</button>
        <% } %>
        <a id='reindex2' class='btn hidden' href="/?synchronize=default"><i class="fa-solid fa-rotate"></i> Synchronize</a>
      </div>
      <div class='rows'>
      ${rows}
      </div>
      ${recommendedHtml}
    </main>`
      <% if (query.sync_needed) { %>
        document.querySelector(".settings #reindex2").classList.remove("hidden")
      <% } %>
      document.querySelector("#prev").addEventListener("click", (e) => {
        history.back()
      })
      document.querySelector("#next").addEventListener("click", (e) => {
        history.forward()
      })
      <% if (agent !== "web") { %>
      document.querySelector("#select").addEventListener('click', async (e) => {
        e.preventDefault()
        e.stopPropagation()
        let paths = await api.select()
        if (paths && paths.length > 0) {
          for(let name of paths) {
            await user.folders.put({ name: name })
          }
          location.href = location.href + "?sync_needed=true"
        }
      })
      <% } %>
      document.querySelector(".settings").addEventListener("click", async (e) => {
        let delTarget = (e.target.classList.contains("del") ? e.target : e.target.closest(".del"))
        let addTarget = (e.target.classList.contains("add") ? e.target : e.target.closest(".add"))
        let customizeTarget = (e.target.classList.contains("customize") ? e.target : e.target.closest(".customize"))
        let reindexTarget = (e.target.classList.contains("reindex-folder") ? e.target : e.target.closest(".reindex-folder"))
        if (delTarget) {
          e.preventDefault()
          e.stopPropagation()
          const confirmed = confirm("disconnect the folder?")
          if (confirmed) {
            let name = delTarget.getAttribute("data-name")
            // Delete the folder
            await user.folders.where({ name }).delete()
            // Delete all the files in the folder
            await db.files.where({ root_path: name }).delete()
            // Delete the checkpoint
            await user.checkpoints.where({ root_path: name }).delete()
            location.href = location.href
          }
        } else if (addTarget) {
          e.preventDefault()
          e.stopPropagation()
          let name = addTarget.getAttribute("data-name")
          await user.folders.put({ name: name })
          location.href = location.href + "?sync_needed=true"
        } else if (reindexTarget) {
          e.preventDefault()
          e.stopPropagation()
          let name = reindexTarget.getAttribute("data-name")
          // Delete all the files in the folder
          await db.files.where({ root_path: name }).delete()
          // Delete the checkpoint
          await user.checkpoints.where({ root_path: name }).delete()
          location.href = "/?synchronize=reindex_folder&sync_folder="+encodeURIComponent(name)
        } else if (customizeTarget) {
          e.preventDefault()
          e.stopPropagation()
          document.querySelector(".explain").classList.toggle("hidden")
        }
      })
      document.querySelector("#reindex2").addEventListener("click", async (e) => {
        e.preventDefault()
        e.stopPropagation()
        location.href = "/?synchronize=default"
      })
      document.querySelector(".search").addEventListener("keyup", (e) => {
        if (e.key === "Enter") {
          location.href = "/?query=" + e.target.value
        }
      })
      settingsRendered = true
    }
    (async () => {
      await init_db()
      await init_theme()
      await renderSettings()
    })();
    </script>
  </body>
</html>
